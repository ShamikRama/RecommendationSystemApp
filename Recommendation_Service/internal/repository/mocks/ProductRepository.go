// Code generated by mockery v2.28.2. DO NOT EDIT.

package mocks

import (
	domain "Recommendation_Service/internal/domain"

	mock "github.com/stretchr/testify/mock"
)

// ProductRepository is an autogenerated mock type for the ProductRepository type
type ProductRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: category, productId
func (_m *ProductRepository) Get(category string, productId int) ([]domain.Product, error) {
	ret := _m.Called(category, productId)

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int) ([]domain.Product, error)); ok {
		return rf(category, productId)
	}
	if rf, ok := ret.Get(0).(func(string, int) []domain.Product); ok {
		r0 = rf(category, productId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int) error); ok {
		r1 = rf(category, productId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserProducts provides a mock function with given fields: userId
func (_m *ProductRepository) GetUserProducts(userId int) ([]domain.Product, error) {
	ret := _m.Called(userId)

	var r0 []domain.Product
	var r1 error
	if rf, ok := ret.Get(0).(func(int) ([]domain.Product, error)); ok {
		return rf(userId)
	}
	if rf, ok := ret.Get(0).(func(int) []domain.Product); ok {
		r0 = rf(userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(int) error); ok {
		r1 = rf(userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SaveDataProduct provides a mock function with given fields: productId, name, category
func (_m *ProductRepository) SaveDataProduct(productId int, name string, category string) error {
	ret := _m.Called(productId, name, category)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, string, string) error); ok {
		r0 = rf(productId, name, category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveRecommendation provides a mock function with given fields: userId, productId, name, category
func (_m *ProductRepository) SaveRecommendation(userId int, productId int, name string, category string) error {
	ret := _m.Called(userId, productId, name, category)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) error); ok {
		r0 = rf(userId, productId, name, category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveUserActions provides a mock function with given fields: userId, productId, name, category
func (_m *ProductRepository) SaveUserActions(userId int, productId int, name string, category string) error {
	ret := _m.Called(userId, productId, name, category)

	var r0 error
	if rf, ok := ret.Get(0).(func(int, int, string, string) error); ok {
		r0 = rf(userId, productId, name, category)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

type mockConstructorTestingTNewProductRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewProductRepository creates a new instance of ProductRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewProductRepository(t mockConstructorTestingTNewProductRepository) *ProductRepository {
	mock := &ProductRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
