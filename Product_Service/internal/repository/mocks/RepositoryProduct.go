// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	domain "Product_Service/internal/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// RepositoryProduct is an autogenerated mock type for the RepositoryProduct type
type RepositoryProduct struct {
	mock.Mock
}

// CreateCartItem provides a mock function with given fields: ctx, cart
func (_m *RepositoryProduct) CreateCartItem(ctx context.Context, cart *domain.Cart) error {
	ret := _m.Called(ctx, cart)

	if len(ret) == 0 {
		panic("no return value specified for CreateCartItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Cart) error); ok {
		r0 = rf(ctx, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteCartItem provides a mock function with given fields: ctx, userID, productID
func (_m *RepositoryProduct) DeleteCartItem(ctx context.Context, userID int, productID int) error {
	ret := _m.Called(ctx, userID, productID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteCartItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) error); ok {
		r0 = rf(ctx, userID, productID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllProducts provides a mock function with given fields: ctx, pageSize, page
func (_m *RepositoryProduct) GetAllProducts(ctx context.Context, pageSize int, page int) ([]domain.Product, int, error) {
	ret := _m.Called(ctx, pageSize, page)

	if len(ret) == 0 {
		panic("no return value specified for GetAllProducts")
	}

	var r0 []domain.Product
	var r1 int
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, int, int) ([]domain.Product, int, error)); ok {
		return rf(ctx, pageSize, page)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int, int) []domain.Product); ok {
		r0 = rf(ctx, pageSize, page)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Product)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int, int) int); ok {
		r1 = rf(ctx, pageSize, page)
	} else {
		r1 = ret.Get(1).(int)
	}

	if rf, ok := ret.Get(2).(func(context.Context, int, int) error); ok {
		r2 = rf(ctx, pageSize, page)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// UpdateCartItem provides a mock function with given fields: ctx, cart
func (_m *RepositoryProduct) UpdateCartItem(ctx context.Context, cart *domain.Cart) error {
	ret := _m.Called(ctx, cart)

	if len(ret) == 0 {
		panic("no return value specified for UpdateCartItem")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Cart) error); ok {
		r0 = rf(ctx, cart)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewRepositoryProduct creates a new instance of RepositoryProduct. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryProduct(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryProduct {
	mock := &RepositoryProduct{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
